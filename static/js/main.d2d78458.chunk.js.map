{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PokemonRow","pokemon","onSelect","name","english","type","join","onClick","PokemonInfo","base","Object","keys","map","key","App","React","useState","filter","filterSet","selectedItem","selectedItemSet","style","margin","width","paddingTop","className","display","gridTemplateColumns","gridColumnGap","value","onChange","evt","target","toLowerCase","includes","slice","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAKMA,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OACjB,+BACE,6BAAKD,EAAQE,KAAKC,UAClB,6BAAKH,EAAQI,KAAKC,KAAK,QACvB,6BACE,wBAAQC,QAAS,kBAAML,EAASD,IAAhC,2BAeAO,EAAc,SAAC,GAAD,IAAGL,EAAH,EAAGA,KAAMM,EAAT,EAASA,KAAT,OAClB,gCACE,6BAAKN,EAAKC,UACV,gCACGM,OAAOC,KAAKF,GAAMG,KAAI,SAACC,GAAD,OACrB,+BACE,6BAAKA,IACL,6BAAKJ,EAAKI,OAFHA,YAyEFC,MAlDf,WACE,MAA4BC,IAAMC,SAAS,IAA3C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAwCH,IAAMC,SAAS,MAAvD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,OACE,sBACEC,MAAO,CACLC,OAAQ,OACRC,MAAO,IACPC,WAAY,QAJhB,UAOE,oBAAIC,UAAU,QAAd,4BACA,sBACEJ,MAAO,CACLK,QAAS,OACTC,oBAAqB,UACrBC,cAAe,QAJnB,UAOE,gCACA,uBAAOC,MAAOZ,EAAQa,SAAU,SAACC,GAAD,OAASb,EAAUa,EAAIC,OAAOH,UAC9D,wBAAON,MAAM,OAAb,UACE,gCACE,+BACE,sCACA,2CAGJ,gCACGtB,EACEgB,QAAO,SAAChB,GAAD,OACNA,EAAQE,KAAKC,QAAQ6B,cAAcC,SAASjB,MAE7CkB,MAAM,EAAG,IACTvB,KAAI,SAACX,GAAD,OACH,cAAC,EAAD,CACEA,QAASA,EAETC,SAAU,SAACD,GAAD,OAAamB,EAAgBnB,KADlCA,EAAQmC,eAOxBjB,GAAgB,cAAC,EAAD,eAAkBA,WCrF1BkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d2d78458.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport pokemon from \"./pokemon.json\";\nimport \"./App.css\";\n\nconst PokemonRow = ({ pokemon, onSelect }) => (\n  <tr>\n    <td>{pokemon.name.english}</td>\n    <td>{pokemon.type.join(\", \")}</td>\n    <td>\n      <button onClick={() => onSelect(pokemon)}>Select!</button>\n    </td>\n  </tr>\n);\n\nPokemonRow.propTypes = {\n  pokemon: PropTypes.shape({\n    name: PropTypes.shape({\n      english: PropTypes.string,\n    }),\n    type: PropTypes.arrayOf(PropTypes.string),\n  }),\n  onSelect: PropTypes.func,\n};\n\nconst PokemonInfo = ({ name, base }) => (\n  <div>\n    <h1>{name.english}</h1>\n    <table>\n      {Object.keys(base).map((key) => (\n        <tr key={key}>\n          <td>{key}</td>\n          <td>{base[key]}</td>\n        </tr>\n      ))}\n    </table>\n  </div>\n);\n\nPokemonInfo.propTypes = {\n  name: PropTypes.shape({\n    english: PropTypes.string,\n  }),\n  bases: PropTypes.shape({\n    HP: PropTypes.number.isRequired,\n    Attack: PropTypes.number.isRequired,\n    Defense: PropTypes.number.isRequired,\n    \"Sp. Attack\": PropTypes.number.isRequired,\n    \"Sp. Defense\": PropTypes.number.isRequired,\n    Speed: PropTypes.number.isRequired,\n  }),\n};\n\nfunction App() {\n  const [filter, filterSet] = React.useState(\"\");\n  const [selectedItem, selectedItemSet] = React.useState(null);\n  return (\n    <div\n      style={{\n        margin: \"auto\",\n        width: 800,\n        paddingTop: \"1rem\",\n      }}\n    >\n      <h1 className=\"title\">Pokemon Search</h1>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: \"70% 30%\",\n          gridColumnGap: \"1rem\",\n        }}\n      >\n        <div>\n        <input value={filter} onChange={(evt) => filterSet(evt.target.value)} />\n        <table width=\"100%\">\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Type</th>\n            </tr>\n          </thead>\n          <tbody>\n            {pokemon\n              .filter((pokemon) =>\n                pokemon.name.english.toLowerCase().includes(filter)\n              )\n              .slice(0, 20)\n              .map((pokemon) => (\n                <PokemonRow\n                  pokemon={pokemon}\n                  key={pokemon.id}\n                  onSelect={(pokemon) => selectedItemSet(pokemon)}\n                />\n              ))}\n          </tbody>\n        </table>\n        </div>\n      {selectedItem && <PokemonInfo {... selectedItem}/>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}